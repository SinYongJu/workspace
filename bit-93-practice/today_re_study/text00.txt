null object로 취급! typeof null st1 t07
변수 선언시 변수를 여러개 선언하면 각각 하나씩 다른 값 설정 가능!
var name = "홍길동";
var tel = "1111-2222";
var kor = 100;
var eng = 100;
var math = 100;

console.log(name, tel, kor, eng, math);

var name2 = "임꺽정",
    tel2 = "2222-2222",
    kor2 = 90,
    eng2 = 90,
    math2 = 90;
console.log(name2, tel2, kor2, eng2, math2);

단 변수를 중복 선언시 나중에 지정한 값이 지정됨!
var name = "홍길동";
var name = "임꺽정";

var 글로벌변수 로써 {}에 제한을 받지 않아요!

let 변수는 선언된 {}안에서만 사용할 수 잇어요 블로 나가면 제거되요
let 은 중복 선언하면 오류 뜹니다! st1 t12
but 클로저라는 넘이 있는데 나중에 뒤쪽에서 어쩌구Property() 라는 함수를 이용하여
변수값 변화를 막아요!
또!  let 변수의 사용시 블록 밖에서도 사용 가능 함을 알아두세요
이 개념과 클로저를 이용한 변수값의 변화를 막는 기술이 있어요!

const 사용시 이거 지켜라! const variable's name = 값! 이 형식으로만 지정가능!
한줄 아래쓰기 하면 디져 진짜!

Array st1 t16~
var 배열명 = [값, 값, 값, ...]; 생성
배열명[index] = 값; 값을 추가함!! 0번 방부터시ㅏㅈㄱ!
배열명[index]       값 꺼낼때 사용!

중요! 배열의 초기화 빈배열생성 글구 , 생성시 [] 사이에 값넣고 생성하면 배열 초기화
중간 인덱스를 건너 뛰면 거까지가 배열의 크기요 값을 넣지 않은 항목 또한 그 배열안에 있다.
이럴 경우 undefined가 떠요!

for (var i = 0; i < a2.length; i++) {
  console.log(i, ":", a2[i]);
} 요러한 조건문을 쓰자나요!? 그럼 출력창에 뜰때 index ':' 값 요론식으로 써서
음란 마귀가 낄 수 잇음
for (var i = 0; i < a2.length; i++) {
  console.log(i +":"+ a2[i]);
} 요렇게 하면 ''가 없어요!
입력의 차이! 크흐~

배열의 활용! 한번에 여러개의 메모리를 준비하는 방법!
변수명과 인덱스 번호를 사용하여 메모리의 위치를 제어한다!
인덱스는 0 부터
여러개의 값을 다루기 편해요 특히 반복문 사용시 편함 ! 참고!

[]요게 배열 만들 때 쓰요욤
var score = []; // 배열을 사용하기 전에 반드시 빈 배열을 만들어야 한다.
score[0] = 90;
score[1] = 80;
score[2] = 70
score[3] = score[0] + score[1] + score[2];
score[4] = score[3] / 3;
console.log(score[0], score[1], score[2], score[3], score[4]);
 요롷게 출력하면 한줄로 나옴 가로!

 반복문 사용하면 세로!

 알아 두셈!

배열 안에 배열이!! 들어감!  글구 배열안의 배열안의 값도 볼 수 잇음
배열명에[][]  이러면 배열에 [] 번째 항 안에 [] 번째 항을 볼 수 잇음
배열명[no].length 라면 배열안의 no 번째 항목의 길이를 알 수 있징!
배열은 걍 여러 개의 연결된 메모리일 뿐!

배열의 생성시 그 배열의 주소가 변수에 저장됨!!
var a1 = ["홍길동", 99, 98, 97];

console.log(a1[1]); // a1에 저장된 배열 주소로 찾아가서 1번 방의 값을 가져온다. 그리고 출력한다.

var v1 = a1; // a1이라는 이름으로 저장된 주소 값을 v1이라는 이름으로 저장한다.
            // 따라서 a1이름으로 저장된 주소와 v1이름으로 저장된 주소가 같다.
            // 결국 같은 배열 메모리를 가리키는 것이다.
a1[1] = 88;
console.log(v1[1]);
이러면 a1 과 v1은 같은 배열의 주소를 같기 때문에 a1에서 값이 변경되면 v1또한 값이 변경된다.


Operator (연산자!)
Infinity NaN 둘다 숫자임!

암시적 형변환 "==" 둘이 타입이 다를때 한쪽의 타입으로 바꾼후 비교!
"use strict"
var a = 7;
var b = "7";
console.log(typeof a, typeof b);
console.log(a == b); // 7 == "7" --> 7 == 7 --> true
console.log(typeof a, typeof b);

"===" 과 "!==" 은 타입에 대해서만 비교할 때 사용됨
타입 다르면 무조건 false(boolean)

a++ 후위 연산자 조심 하셈 이너마는 일단 지정된 변수값을 그자리에 놓아둠
그리고 읽히고 나서 넘길때 1 증가 시켜버림 조심조심!

"=" 이너마는 r -value를 수행후 l- value를 수행한다!!! 잊지마 이런거!!!!
그래서

a = 10;
var r = a++ + a++ + a++ + a--;
console.log(r, a);
이걸 해보면 a 는 12 이다!!!!!! 조심행!!!

a = 10;
a = a++;
console.log(a);
이걸로 보자면 a++에 의해서 10 이 출력됨

a = 10;
a = ++a;
console.log(a);

a = 10;
a = a++;
console.log(a);
a = --a
console.log(a);

a= a--
console.log(a);
a= a++
console.log(a);

이거 해보면 앎 이색히 개빡침

머리가 안따라가!


연산자 엔드 오어 낫!
&&  || !
앞식부터 보세염 앞식의 결론으 뒷식을 실행할지 말지함!
((10 % 2) == 0) && console.log("실행1"); 앞식 트루면 무조건 뒷 실행
((10 % 2) == 0) || console.log("실행3"); 앞식 펄스어도 뒷식 실행


조건 연산자 ?
var a = 11;

console.log((a % 2) == 0 ? "짝수입니다." : "홀수입니다.");

(a % 2) == 0 ? console.log("짝수입니다.") : console.log("홀수입니다.");


조건식 ? 트루 실행 : 펄스 실행

비트 연산자 추가! << >> >>>  AND OR XOR not bit
/*
a & -b   (둘다 1 일때 만 1 그밖에 0)     색없애기
a | b'   (' 둘중하나라도 1이면 1 그밖 0) 색강조!
a' ^ b; (두개 값이 다르면 1 같으면 0)  픽셀값 같을 경우 제거
~a   (모든 비트를 반대 값으로! )
*/

콤마의 사용 명령문 연속 작성시 사용1
var a, b = 20, c;
console.log(a, b, c);

var r;
r = 100 * 2, 5 / 3, 4 + 7; // 콤마는 왼쪽에서 오른쪽으로 순차적으로 실행한다.
console.log(r

function f() {
  return 5, 7, 8; // 콤마는 왼쪽에서 오른쪽으로 실행하기 때문에 마지막 값이 출력된다.
}

console.log(f());


주제: 연산자 - 단축 배정(할당) 연산자
- =, +=, -=, *=, /=, %=, <<=, >>=, >>>=, &&=, ||= 등
- 문법
변수1 = 변수1 + 값;
변수1 += 값;

변수1 = 변수1 * 값;
변수1 *= 값;

기본 연산자는 우선순위에 의해서 실행된다.!


st2 t14 여기 꼭 봐바염~

null, undefined는 그 의미대로 비교한다.
  즉 암시적 형변환을 하지 않는다.
- null의 의미는 변수가 비어 있다.
- undefined의 의미는 변수가 없다.


연산자 delete은 객체에서 프로퍼티를 제거할때 사용
/obj.v1  = 100 생성하고
delete obj.v1 요런 식으로 제거 해버리장! 빵야 빵야!


조건문 if 절의 사용

var어쩌구

if (expression){
}
else {
  }
  if (true) {
  }
  else {
  } if ()
    else {
    }
------------------------------------------
if (exp) {

} else if () {
            }
  else if (){

} else {}

요런식으로 설정 가능하다.

if 절 이후에는 바로 그에 상응한 식이 와야하며 식이 2 줄 이상일 경우나
  혹은 else 절로 이어질 경우 2 줄이상 사용할 경우 {}로 묶어버린다.

if절 사용요령 if절을 사용할때에는  복잡한 조건일때 사용한다.
위 ... switch문과 비교!

var age;

age = 50;
if (age > 19)
  if (age >= 65)
    console.log("노인");
else // <-- else 문은 항상 바로 직전의 if에 묶인다.
  console.log("미성년");
console.log("------------------------")

age = 50;
if (age > 19) {
  if (age >= 65)
    console.log("노인");
}
else // <-- else 문은 항상 바로 직전의 if에 묶인다.
  console.log("미성년");
console.log("------------------------")

if절은 if에 바로 걸치게 사용해야 바로 위 if에 걸치고 하나의
절로 만들기 위해서는 {} 사용이 필수!

switch (expression) {
  case expression:

  case expression:

  case expression:

    break;   /return;
  default:

}
level = "팀장";

switch (level) {
  case "팀장":
    console.log("석사 학위자");
    break;

  case "개발자":
    console.log("정보처리기사 자격증 소지자");
    break;
  case "사원":
    console.log("워드 자격증 소지자");
    break;
}


switch문은  간단한 조건에 의해서 선택하여 사용가능한데요?!
문제는 이너마는 case에 주어지는 식을 찾아 거기서부터 실행해나가욤!

그래서 거기에 해당하는 식이 실행된 이후에 스위치 문의 실행을 멈추고 나갈때는
break을 사용해 주세욤!

switch 문법에서는 NaN (type은 number)그러나 NaN은 직접 비교가 안되서!
isNaN()으로 확인해야 해요!

console.log(typeof isNaN())
var a1 = isNaN()
if (a1 == true)
console.log("true 에욤")
boolean으로 비교 되욤!

거의 모든 값이 사용될 수 있습니다.
switch문은 간단한 조건하에서 사용합시바.

prompt를 사용하기 위해서는 모듈의 설치가 필요합니다.!!
요놈 객체
명령창에서 해당 js 저장된 폴더에서  npm install prompt

prompt 사용법!
var prompt = require('prompt')
prompt.start();
prompt.get([], function(err, result) {
        여기에 대한 설명은 객체쪽 보세욤!
});

반복문!  exp가 ture이이면 order를 실행하고 반복해요
하지만! exp를 한정하는 조건이 없다면 무한 반복되요!
while (expression) order;
while (expression) {order1,
                    order2,
                    odder3
}
var a =2
while (a < 9) {
  var b = 1;
  while (b <=9) {
    b++
  }
  a++
};

요런식의 전개로 진행된다.! 이것도 또한 if절 처럼 order문이
바로 바로 나와야 해요! order가 길면 {}로 묶어 버려욧!

do while 문법

do order; while (exp)
order를 먼저 실행하고 exp가 참이면  order를 반복 실행합니다.
exp에 대하여 false가 나올경우 while의 명령을 실행 하고
반복 하기 않는다.
var a = 2;
do {

  console.log(a++)
  console.log("실행하겠습니다.");
}
while (a <= 5) {
  console.log(a)
  console.log("실행되었습니다")
}


반복문 for
인덱스의 증가/ 감소에 따라 반복을 시킬 때 주로 사용
보통 배열을 다룰 때 사용
문법
for (변수초기화 문장; 조건식; 증가 또는 감소문) {
  명령문1 ,명령문2, 명령문3 ;
}
for (var count = 1; count <= 10; count++) {
  console.log(count);
}
이걸 while문으로 바꾸면

var count = 1;
while (count <= 10) {
  console.log(count);
  count++;
};

while문 처럼 for문의 중첩 사용 가능!

for (초기화문; 조건식; 증/감문){
  for (초기화문; 조건식; 증/감문){
    명령문!
  }
}
안쪽꺼 다 계산하고 바깥쪽으로 가는 그런 모습임돠!

for (var a = 2; a <= 9; a++) {
  for (var b = 1; b <= 9; b++) {
    console.log(a + " * " + b + " = " + (a * b));
  }
}
var a = 1
while (a <= 9) {
  var b = 1
  while(b <= 9){
    console.log(a+"*"+b+"="+(a*b));
    b++
  }
  a++
}


반복문 for in 문법!!
객체의 프로퍼티들을 추출할때 사용 배열에도 사용 ㅏ능!
for of든 for in 이든 안의 값의 [][]의 값들을 저장한다!


syntax!!
for (var key in array or object) {명령문, 명령무, 명령문,....명령문;};
key의 변수에는 배열의 인덱스 혹은 {}의 label(프로퍼티명)이 저장된다!!!

단, 주의 할점은
이너마는 반복문이다.
for (var key in names) { // <-- 배열인 경우 key 라는 변수에는 배열의 인덱스가 저장된다.
  console.log(key, names[key]);
} 요렇게 할경우
names라는 항목에서 인덱스나 프로퍼티명을 순차적으로 출력할 수 있어요
다만 이러한 인덱스나 레이블을 직접적으로 다룰 수 는 없습니다!

for (var i = 0; i < names.length; i += 2) {
  console.log(i, names[i]);
} 이렇게 설정하면 인덱스 직접적으로 레이블에 관여가 가능해져요!!!
여기서는 짝수의 인덱스 만을 출력하겠다

var student = {
  name: "홍길동",
  age: 20,
  tel: "1111-1111",
  email: "test@test.com"
};

for (var key in student) {
  console.log(key, student[key]);
}
console.log("------------------------------");

{} object를 다룰 경우 그안의 레이블을 순차적으로 사용할 수 잇어요
근데 이것 또안 그안의 레이블을 직접적으로 못다룬다능!

for of 반복문 문법
배열 뿐만 아니라 iterable object 에서 값을 추출할 때 사용한다.
forin과 다르게 이오나응 인덱스나 프로퍼티명이 아닌 해당 값이라는 점이다.!

syntax
for (var 변수 in 배열 또는 iterable object) {
  명령문, 명령문, 명령문, ... 명령문;
}
즉 값들을 변수에 저장저장!

단, 요놈으 색히도 반복문이므로 반복적으로 수행 된다는 점을 꼭 생각생각!

함수 파트!
 함수
함수정의!
 function F's name( parameters (변수, 변수, 변수...)) {orders;};
 parameter란 값을 받는 변수를 의미한다.!!!!!
 단!! 파라미터 변수를 선언할때 var let const 를 붙이지 마세욤!!1
함수호출
/*
F's name (값, 값, 값)으로 함수를 사용할 수 있다.
*/
ex) f1()
값==argument라 부른다. 함수를 호출할 때 넘겨주는 값을 아규먼트라 함
function f4(a) {
  return "a = " + a + "입니다.";
}

var value = f4(100);
console.log(value);

// 굳이 값을 별도의 변수에 저장한 후 출력할 필요는 없다.
// 함수의 리턴 값을 즉시 사용할 수 있다.
// 참고! 실행은 항상 괄호() 안쪽부터 실행한다.
console.log(f4(200)); // f4()를 실행한 후 그 리턴 값을 출력하라는 의미이다.

return 함수의 실행된 값을 반환한다는 말인데 이는
함수의 실행을 끝내고
함수의 값을 주는 것을 의미한다.!
f4(200) 이나 var value = f4(200) 이나 같은 이야기이다! 즉
 return의 의미를! "="로 보자!
 function f2() {
   return "hello";  // 값을 리턴하려면 return 명령을 사용해야 한다.
 }
 f2() = "hello" 라는 의미이다.!!!

단, return을 사용시 함수에서 나가지며 리턴된 값을 이용하기 위해서는
명령어를 사용해야만 해욤!

함수의 hoisting!!!!!

name = "홍길동";

var name; // 변수나 함수 정의가 제일 먼저 실행된다. hoisting 된다.


// f1() 함수를 정의하기 전에 호출
f1();


function f1() {
  console.log("f1() 호출됨");
}

// 함수를 정의한 후 f1() 호출
f1();

"use strict"


console.log(name)

var name = "홍길동";
console.log(name);

호이스팅이란 자바스크립의 엔진이 변수나 함수 정의를 먼저 끌어올린다는 의미인데
위의 첫 번째 스크립트를 보자 변수에 값을 지정이후 선언 되었는데
이 때 선언이 호이스팅 된것이고 함수 호출 이후 함수가 정의 되었다
이때 함수의 정의가 호이스팅 된것이다.

글구 아래의 스트릭트 모드 아래의 스크립트를 보면

변수의 선언과 값의 지정이 변수의 출력 이후에 되었는데
첫번째 출력에서는 undefined라는 것을 확인 할 수 있고 두번째 부터는
정의된 값을 볼 수 있다.
즉!! 초기화 문장! ( 이 스크립내에서 명령을 내린 문장,그래서 값이 도출되거나 하는것?! )
이 나온뒤에 변수의 선언과 값이 정의가 된것인데
선언과 정의 전에 나온 출력값이 undefined인것으로 보아서
즉 변수의 선언만이 Hoisting된것을 볼 수 있다,

함수의 정의 방법
익명 함수!!!
일반적인 함수는
function f1 () {}

익명함수는 함수를 변수에 저장하는 형태이다.
var f1 = function() {}

일반함수를 익명함수처럼 정의 할 수 있다.
var f1 = function ok() {}

익명함수의 Hoisting
console.log(f2);
f1();
//f2(); // f2 변수는 호이스팅 규칙에 따라 끌어 올려져서 존재하는 상태이지만,
      // 익명함수가 저장된 상태는 아니다.

// 1) 일반적인 함수 정의
function f1() {
  console.log("okok");
}

// 2) 익명함수를 정의하기
var f2 = function() {
  console.log("익명함수....");
}

f2();

이경우 변수선언의 호이스팅처럼 변수의 선언만이 hoisting이 되었다.
그래서 undefined인 상태이며 아직 f2라는 익명함수는 정의되어지지
않은 것이다.!!!

Arrow 함수!!!!!
함수의 정의를 축약한 문법!

var f1 = () => [order;}

function f1() {} 이것의 의미와 같다!

왜? 자바 스크립트에서는 함수또한 객체로써 변수로 보기 때문이다!

function f1() {
  console.log("f1()... 호출됨")
}

function f2() {
  console.log("f2()... 호출됨")
}

var v1 = f1;
var v2 = v1;

f1();
v1();
v2();

v1 = f2;
v1();

여기서도 보여지는 것은 함수를 값처럼 주고 받는 다는 것인데
엄연히 따지면 주소를 주고 받는 의미이다!

주의 함수의 실행시 주의사항!!
var f3 = () => {
  console.log("------------------")
  console.log("f3()... 호출됨");
  console.log("Arrow 함수임.")
  return "hello2"; // 블록 안에서 값을 리턴할 때는 반드시 return 명령을 사용해야 한다.
}
value = f3();
console.log(value);
f3()


위의 스크립트를 읽자면

f3라는 함수를 정의하고 value에 f3()의 주소를 저장한다
그리고 value를 출력하라는 명령을 하고 함수 f3을 호출한다

결과를 보면  value를 출력을 하면 hello2까지 출력되고
f3()을 호출할 경우 hello2는 호출 되지 않음을 볼 수 있다.
즉, return이 함수에 값을 저장 하는 것인데 f3() = "hello2" 라는
것이다. 그래서

f3()을 이용해서 호출만 할 경우 f3내의 명령어가 실행이 되어 출력되고
f3()="hello2"라는 것이 저장만 되는것
그래서 hello2를 보고 싶으면 console.log(f3())



// 함수(주소)를 받을 수 있다.


 함수의 주소 넘기기!

function p(a, b) {
  return a+b ;
}

function m(a, b) {
  return a-b;
}
function cl(adr) {
  var value = adr(20, 30)
  console.log(value)
}

cl(p); 직역: 이것을 코백 함수라 한다 꼬리물기
c1에 parameter에 p함수를 입력하면 p함수의 주소가 입력 된것으로
c1의 명령의 adr = p ; adr(20, 30) = p(a + b) 가 된다고 볼 수 있다.

이것을 이용하여 함수의 파라미터를 옮길 수 잇다.

// 함수의 이름이 함수를 주소를 저장한 변수이다.
function caller(f) {
  var value = f(20, 30);    //콜백 이용시 요기가 포인트 f 끅!
  console.log(value);
}
function plus(a, b) {
  return a + b;
}
caller(plus);

var plus2 = function(a, b) {
  return a + b;
}
caller(plus2);

// plus3()라는 함수를 정의한 후 그 자리에 그 함수의 주소를 놓는다.
// 그리고 caller() 호출하여 그 자리에 놓인 주소를 넘긴다.
caller(function plus3(a, b) {
  return a + b;
});

// 파라미터로 넘기는 함수는 굳이 이름을 가질 필요가 없다.
// 보통 익명함수로 정의한다.

caller(function(a, b) {
  return a + b;
});

**** 요형태를 보자 파라미터로 넘길때 꼭 그 함수의 주소가 아닌
걍 정의로 할 수 있다.
그렇다고 var f = function() { } 요런형태는 하지 말자!

그래서 한번 쓰고 할꺼라면 굳이 함수의 이름을 정의 하지 않고

익명함수를 사용하자1


// ECMAScript 2015 버전부터는 익명함수를 간단하게 정의할 수 있는 문법을 제공한다.
// 그 문법이 arrow function
caller((a, b) => {
  return a + b;
});

caller((a, b) => {return a + b;});

// 명령문의 끝을 명확하게 구분할 수 있다면, 세미콜론(;)을 생략할 수 있다.
caller((a, b) => {return a + b});

// 함수를 호출하는 문장은 다음 문장과 구별이 되기 때문에 보통 세미콜론(;)을 생략한다.
caller((a, b) => {return a + b})

// 함수에 들어 있는 명령문이 한 개 일 때는 블록{}을 생략할 수 있다.
// 블록을 생략했을 때는 값을 리턴할 때 return 을 사용하지 말아야 한다.
// 블록을 생략했을 때는 명령문 뒤에 세미콜론(;)을 사용하지 말아야 한다.
caller((a, b) => a + b)


리턴은 블록안에서만 사용하도록 하자! 불안 데스!

function calculator(op) {
  switch (op) {
  case "+":
    // 익명 함수를 정의한 후 그 익명 함수의 주소를 리턴한다.
    return function(a, b) {return a + b;};
  case "-":
    // 익명 함수를 정의한 후 그 익명 함수의 주소를 리턴한다.
    return function(a, b) {
      return a - b;
    };
  }
}

// + 계산을 수행하는 함수(의 주소)를 리턴 받는다.
var f = calculator("+");

// 변수에 함수(의 주소)가 들어 있다면, 함수처럼 사용할 수 있다.
var value = f(10, 20);
console.log(value);

f = calculator("-");
value = f(10, 20);
console.log(value);

// 실무에서는 리턴 받은 함수(의 주소)를 바로 사용하는 경우가 많다.
value = calculator("-")(10, 20);
console.log(value);

// 리턴 값을 바로 출력할 수 있다.
console.log(calculator("-")(10, 20));

99999999999999999999999999999999999999999999999999999999999
function f1(a, b) {
  console.log(a, b)
}

f1(10, 20)
f1(20, 30)

// 파라미터의 개수에 상관없이 값을 넘길 수 있다.
f1(); // 오류 아님!
f1(10); // 오류 아님!
f1(10, 20, 30); // 오류 아님!
f1(10, 20, 30, 40); // 오류 아님!

여기에 arguments들은 {} 객체로서 존재함!

{}출력됨!



변수에는 var let const가 잇으나

변수로써 사용 범위에 따른
global변수와 local변수가 있다.

글로벌 변수의 경우 함수 밖의 변수 이고 언제든 함수 안에서도 사용 가능하다.
로컬 변수는 함수안의 변수로 함수 밖에서는 제거가 된다.

var v1 = 100;

function f1() {
  // 함수 안에 선언하는 변수는 모두 로컬 변수이다.
  // => 같은 이름을 갖는 글로벌 변수가 있다 하더라도,
  //    상관없이 새 로컬 변수를 만든다.
  // => 로컬 변수는 함수 호출이 끝나면 제거된다.
  var v1 = 200;
  var v2 = 300;
  console.log("f1():", v1, v2);
}

console.log(v1); // 글로벌 변수 v1
f1();
console.log(v1); // 글로벌 변수 v1
//console.log(v2); // 글로벌 변수 v2. f1() 로컬 변수 v2를 사용할 수 없다.
f1();


이 스크립트에서 보면 함수안의 선언된 변수의 이름이 아무리 글로벌 변수와 이름이
같다 하여도 로컬 변수이므로 함수 실행이 끝나면 사라진다! 그리고
함수 안에서 생성된 새로운 변수는 함수가 실행이 끝난 후에는 사라진다



로컬변수와 스택메모리
로컬변수는 함수가 호출되는 동안 생성되어 호출이 끝나면 제거
함수에서 함수를 호출할 때 마다 이전으로 되돌아 올 수 있도록
스택 방식으로 메모리를 관리한다1



중요!!!!! 동기 방식 과 비동기 방식
동기 방식
대부분의 함수방식
함수 실행이 완료 될때 까지 블로킹이 걸려있어서 완료 되기전에는 다음명령이 실행 안됨
무한 루프에 빠지면 더이상 실행 불가 하다
시간이 지연될 수 잇따.


비동기 방식
서버와 통신이나 파일 입,출력 부분에서 사용된다
함수 호출 후 작업이 완료가 되지 않아도 즉시 다음 명령문을 실행하는 방식
ex) prompt.

closure 란 함수안에 함수가!?

클로저의 메모리는 별도 관리 함!

var arr = ["홍길동", "임꺽정", "유관순", "안중근", "윤봉길"]
var count = -1;

// 클로저가 자체 변수를 사용하기 전
// 클로저는 글로벌 변수 count를 사용한다.
function outer() {
  count++;

  return function() {
    console.log(arr[count])
  }
}


var f1 = outer();
var f2 = outer();
var f3 = outer();
var f4 = outer();
var f5 = outer();

f1();
f2();
/*
f3();
f4();
f5();
*/
보면 일단 outer라는 함수는 동기방식이다. 근데!!! 문제는
return뒤에 함수가 있으므로 count++가 먼저 실행을 맞춘다. 문제는
실행이 한번 호출하면 1번만 적용이 된다는 것이고 저 카운트의 후위 연산자가
끝나야 반환 값으로 배열의 특정 인덱스의 값을 반환한다.
그런데 f1() 을 연속 호출하면 횟수 1번으로 치는거 같이 나오고
ㄹ1 ㄹ2 ㄹ3 ㄹ4 ㄹ5 를 연속으로 호출해 버리면 "윤봉길"만 출력된다.
분명 변수는 다르나 같은 주소의 함수를 호출하는데 이가 통용이 안되는 것으로보아
다른 메모리를 사용함을 알 수 있다.
ㄹ1 ㄹ2 를 사용하면 "임꺽정"만 출력된다.
즉, 이것은 리턴뒤의 함수가 만약 로컬변수인 카운트가 함수가 끝나면
제거되어 뒤의 함수의 호출이 불가능 하므로 따로 메모리에 저장되었다는 것을 예측할 수 있다.

클로저 사용시 주소의 사용에 유의하자!! 같은 함수에 다른 변수를 주어진다해도
클로저메모리에 저장되는 변수 값이 달라져서 같은 함수같은 아닌 것이 되므로
즉, 호출에 따른 저장된 변수의 값이 변해서 다른 함수처럼 인식 되므로
조심하자!!




로컬변수는 함수 안에서 정의되는 변수이고 글로벌 변수는 {} 안에서 선언되어도
글러벌 하다!!

다른 형태로
var arr = ["홍길동", "임꺽정", "유관순", "안중근", "윤봉길"]
var functionList = []

// 일반 블록{} 안에 선언하는 var 변수는 "글로벌 변수"이다.
// 단, 함수 안에 선언된 var 변수는 "로컬 변수"이다.
for (var i = 0; i < arr.length; i++) {
  functionList[i] = function() {
    console.log(arr[i]); // 변수 i 는 글로벌 변수이기 때문에 따로 복제하지 않는다.
  }
}
console.log(i)
functionList[0]();
functionList[1]();
functionList[2]();
functionList[3]();
functionList[4]();

의 경우를 보자! 이경우에는 i가 5가 출력이 되는데

전혀 저 배열안의 값들은 출력이 되어 지지 않는다.
일단 반복문에 의해 0부터 4까지의 값들이 i에 주어지는데 fuctionList라는 배열에
0번부터 4번 방 까지의 값을 입력받기 위한 함수도 있으나 값이 저장이 안되어서

undefined라고 표시된다. 즉 i 글로벌 변수는 따로 복제되어 저장되지 않았음을 볼 수 잇어요!
글로벌변수라 따로 저장할 필요가 없는것이다!



var arr = ["홍길동", "임꺽정", "유관순", "안중근", "윤봉길"]
var functionList = []

// let 변수는 선언된 범위 안에서만 유효하다.
// 즉 그 범위를 벗어나면 로컬 변수처럼 제거된다.
// 그래서 let 변수도 클로저의 복제 대상이다.
for (let i = 0; i < arr.length; i++) {
  functionList[i] = function() {
    console.log(arr[i]) // 변수 i 는 let 변수이기 때문에 로컬 변수처럼 따로 복제한다.
  }
}
//console.log(i) // i는 let 변수이기 때문에 for 문이 끝나면 제거된다.
functionList[0]()
functionList[1]()
functionList[2]()
functionList[3]()
functionList[4]()

/* 함수를 만들 때 그 함수가 "로컬 변수"나 let 변수를 사용할 경우,
언제 제거될 지 모르기 때문에 실행 안전을 위해
따로 복제해 둔다.
그리고 그 복제된 변수를 사용한다.
*/
let의 경우는로컬 변수 처럼 {}에서 사용 되고 지워져서 실행 오류가 잇을 수 있으면
따로 복제해 둔다. 클로저~

재귀호출과 꼬리 재귀함수
야는 스택  야는 곧바로 리턴 하는 방식 반복문 가능!

수학적인 대가리가 요구되욤!!

객체! {} 는 배열인덱스를 이용하여 식별하고 순서대로 입력되고 기록되는대 반해서
"문자열"을 이용하여 식별할 수 있도록 저장하는 것을 객체라 한다. 다만 순서대로는 아니다.

입력 방법!!!
var obj  ={key: value....}

var v = "c"
ovj[v] = "d"

obj[""] = "a"
obj[''] = "b"
obj.names = ""

obj["first name"] = "길동"
obj.first name 일때 공백, 특수문자에 의해서 값을 끄낼 수 없음
이럴때는 obj.[] 요론 형태로 끄내야 해요!

초기화라 기존 객체에 새로운 것을 추가하여 새로운 객체를 만든다 생각자!
즉
var obj = {key : value}
obj.[] = ""
or
obj.문자 = ""

변수에 저장 되는 것은 객체의 주소!
주고 받음은 주소의 주고 받음이다! 값일 경우 값을 주고 받는다.

문자열은 immutable 객체로써 replace를 사용하여 변경을 할경우
그 문자열이 바뀌는 것이 아니라 새로 복사되어 다시 쓰여지는 것
그러므로 문자열 또한 주소의 교환이다!
